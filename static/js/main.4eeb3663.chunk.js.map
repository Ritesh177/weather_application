{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KACMA,EACC,mCADDA,EAEE,2CAgEOC,MA7Df,WAEI,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA2BF,mBAAS,IAApC,mBAAOG,EAAP,KAAeC,EAAf,KA0BF,OACE,qBAAKC,UACmC,oBAAhBF,EAAQG,MACZH,EAAQG,KAAKC,KAAO,IACpB,WAEH,MALjB,SAME,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAU,aAAaI,YAAY,cAAcC,SAAU,SAAAC,GAAC,OAAGT,EAASS,EAAEC,OAAOC,QAAQA,MAAOZ,EAAOa,WAjClH,SAAAC,GACG,UAAXA,EAAIC,KACNC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,8BAAoDH,IACxDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,WA6BW,oBAAhBlB,EAAQG,KACf,gCACF,sBAAKD,UAAU,eAAf,UACN,sBAAKA,UAAU,WAAf,UAA2BF,EAAQqB,KAAnC,IAA0CrB,EAAQsB,IAAIC,WAC9C,qBAAKrB,UAAU,OAAf,SA5BY,SAACsB,GACnB,IAIIC,EAFK,CAAC,SAAS,SAAS,UAAU,YAAY,WAAW,SAAS,YAEzDD,EAAEE,UACXC,EAAKH,EAAEI,UACPC,EANQ,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAC1D,YAAY,UAAU,WAAW,YAK5BL,EAAEM,YACfC,EAAKP,EAAEQ,cAEX,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAkBLE,CAAY,IAAIC,WAEzC,sBAAKhC,UAAU,cAAf,UACA,sBAAKA,UAAU,OAAf,UACGiC,KAAKC,MAAMpC,EAAQG,KAAKC,KAAK,KADhC,WAGA,qBAAKF,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAG1C,SChDIkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.4eeb3663.chunk.js","sourcesContent":["import React,{useState} from \"react\";\nconst api={\n  key: \"7d4c6a7985370c5ab149300ae171ddf3\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n    const [query,setQuery]=useState('');\n    const [weather,setWeather]=useState({});\n\n    const search= evt=>{\n      if (evt.key=== \"Enter\"){\n        fetch(`${api.base}weather?q=${query}&unit=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n      }\n    }\n\n  const dateBuilder = (d)=>{\n    let months= [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\n                \"September\",\"October\",\"November\",\"December\"];\n    let days=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\n\n    let day=days[d.getDay()];\n    let date=d.getDate();\n    let month=months[d.getMonth()];\n    let year=d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n  return (\n    <div className={\n                    (typeof weather.main != \"undefined\") \n                    ? ((weather.main.temp > 289)\n                      ? 'app warm'\n                      :'app')\n                    :'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input type=\"text\" className=\"search-bar\" placeholder=\"Search Here\" onChange={e=> setQuery(e.target.value)} value={query} onKeyPress={search} />\n\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n        <div className=\"location-box\">\n  <div className=\"location\">{weather.name},{weather.sys.country}</div>\n          <div className=\"date\">{dateBuilder(new Date())}</div>\n        </div>\n        <div className=\"weather-box\">\n        <div className=\"temp\">\n          {Math.round(weather.main.temp-273)}Â°c\n        </div>\n        <div className=\"weather\">{weather.weather[0].main}</div>\n        </div>\n        </div>\n        ):('')}\n      </main>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}